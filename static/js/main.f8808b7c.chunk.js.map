{"version":3,"sources":["Header.js","Note.js","NotesList.js","App.js","index.js"],"names":["Header","props","react_default","a","createElement","className","onClick","addNote","type","placeholder","value","searchText","onChange","onSearch","Note","note","title","e","updatedValue","target","editMeId","id","onType","description","remove","keepSearchMatches","doesMatchSearch","NotesList","noteElements","notes","filter","map","src_Note","key","App","state","Date","now","newNotes","concat","Object","toConsumableArray","_this","setState","updatedKey","updatedNotes","toLowerCase","titleMatch","includes","descriptionMatch","hasMatch","deleteMeId","stringifiedNotes","JSON","stringify","this","localStorage","setItem","getItem","savedNotes","parse","src_Header","src_NotesList","Component","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.f8808b7c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => (\n  <header className=\"app-header\">\n    <h1 className=\"app-header__title\">Super Sticky Notes</h1>\n    <aside className=\"app-header__controls\">\n      <button className=\"add-new\" onClick={props.addNote}>\n        + New Note\n      </button>\n      <input\n        type=\"text\"\n        placeholder=\"Type here to search...\"\n        className=\"search\"\n        value={props.searchText}\n        onChange={props.onSearch}\n      />\n    </aside>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\n\n/* This presentational component renders a single\nlist item element with two text input fields,\none for the note's title and one for the note's\ndescription. When the user types in these fields,\nfunctions that are passed to this component\nas props are used to update the state of the\ncorresponding note object in the state of the\nApp component  */\nconst Note = (props) => {\n  const updateTitle = (e) => {\n    const updatedValue = e.target.value;\n    const editMeId = props.note.id;\n    props.onType(editMeId, \"title\", updatedValue);\n  };\n  const updateDescription = (e) => {\n    const updatedValue = e.target.value;\n    const editMeId = props.note.id;\n    props.onType(editMeId, \"description\", updatedValue);\n  };\n  const clickDelete = () => props.remove(props.note.id);\n\n  return (\n    <li className=\"note\">\n      <input\n        type=\"text\"\n        value={props.note.title}\n        onChange={updateTitle}\n        placeholder=\"Title\"\n        className=\"note__title\"\n      />\n      <textarea\n        value={props.note.description}\n        onChange={updateDescription}\n        placeholder=\"Description...\"\n        className=\"note__description\"\n      />\n      <span onClick={clickDelete} className=\"note__delete\">\n        X\n      </span>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from \"react\";\nimport Note from \"./Note.js\";\n\nconst keepSearchMatches = (note) => note.doesMatchSearch;\n\nconst NotesList = (props) => {\n  const renderNote = (note) => (\n    <Note\n      note={note}\n      key={note.id}\n      onType={props.onType}\n      remove={props.remove}\n    />\n  );\n\n  const searchMatches = props.notes.filter(keepSearchMatches);\n  const noteElements = searchMatches.map(renderNote);\n  return <ul className=\"notes-list\">{noteElements}</ul>;\n};\n\nexport default NotesList;\n","import React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n\n/* This container component manages all of the state \nfor this application, delegating rendering logic to \npresentational components. */\nclass App extends Component {\n  state = {\n    notes: [\n      {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }\n    ],\n    searchText: \"\"\n  };\n  addNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true\n    };\n    const newNotes = [\n      newNote,\n      ...this.state.notes\n    ];\n    this.setState({ notes: newNotes });\n  };\n  onType = (\n    editMeId,\n    updatedKey,\n    updatedValue\n  ) => {\n    /* this event handler updates sticky note text fields\n      - editMeId: the id of the note that the user typed in\n      - updatedKey: which field was edited? 'title' or 'description'\n      - updatedValue: new value of edited field */\n    const updateIdMatch = (note) => {\n      if (note.id !== editMeId) {\n        return note;\n      } else {\n        if (updatedKey === \"title\") {\n          note.title = updatedValue;\n          return note;\n        } else {\n          note.description = updatedValue;\n          return note;\n        }\n      }\n    };\n    const updatedNotes = this.state.notes.map(\n      updateIdMatch\n    );\n    this.setState({ notes: updatedNotes });\n  };\n  onSearch = (e) => {\n    /* toggle the doesMatchSearch boolean value of each sticky\n    note when the user types in the search field.\n    set the doesMatchSearch value to true for a sticky note if\n    it's title or description matches the search string. */\n    const searchText = e.target.value.toLowerCase();\n    const updatedNotes = this.state.notes.map(\n      (note) => {\n        if (!searchText) {\n          /* If the search field is empty, then\n      we set the doesMatchSearch value for every note to true. */\n          note.doesMatchSearch = true;\n          return note;\n        } else {\n          const title = note.title.toLowerCase();\n          const description = note.description.toLowerCase();\n          const titleMatch = title.includes(\n            searchText\n          );\n          const descriptionMatch = description.includes(\n            searchText\n          );\n          const hasMatch =\n            titleMatch || descriptionMatch;\n          note.doesMatchSearch = hasMatch;\n          return note;\n        }\n      }\n    );\n    this.setState({\n      searchText: searchText,\n      notes: updatedNotes\n    });\n  };\n  remove = (deleteMeId) => {\n    /* remove note by id of note that the user clicked on */\n    const notIdMatch = (note) =>\n      note.id !== deleteMeId;\n    const updatedNotes = this.state.notes.filter(\n      notIdMatch\n    );\n    this.setState({ notes: updatedNotes });\n  };\n  componentDidUpdate() {\n    /* after each render, save notes data to local storage */\n    const stringifiedNotes = JSON.stringify(\n      this.state.notes\n    );\n    localStorage.setItem(\n      \"savedNotes\",\n      stringifiedNotes\n    );\n  }\n  componentDidMount() {\n    /* after rendering for the first time, read saved\n    notes data from local storage and pass that data\n    to component state if it exists */\n    const stringifiedNotes = localStorage.getItem(\n      \"savedNotes\"\n    );\n    if (stringifiedNotes) {\n      const savedNotes = JSON.parse(\n        stringifiedNotes\n      );\n      this.setState({ notes: savedNotes });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Header\n          searchText={this.state.searchText}\n          addNote={this.addNote}\n          onSearch={this.onSearch}\n        />\n        <NotesList\n          notes={this.state.notes}\n          onType={this.onType}\n          remove={this.remove}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}